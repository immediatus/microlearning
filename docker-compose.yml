version: '3.8'

services:
  # FastAPI Backend
  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.api
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/microlearning
  #     - REDIS_URL=redis://redis:6379
  #     - DEBUG=true
  #     - ENVIRONMENT=development
  #   env_file:
  #     - .env
  #   depends_on:
  #     - db
  #     - redis
  #   volumes:
  #     - ./app:/app/app:ro
  #     - ./tests:/app/tests:ro
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Celery Worker for AI Content Generation
  # celery-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.api
  #   command: celery -A app.celery worker --loglevel=info --concurrency=2
  #   environment:
  #     - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/microlearning
  #     - REDIS_URL=redis://redis:6379
  #     - DEBUG=true
  #     - ENVIRONMENT=development
  #   env_file:
  #     - .env
  #   depends_on:
  #     - db
  #     - redis
  #   volumes:
  #     - ./app:/app/app:ro
  #   restart: unless-stopped

  # Celery Beat Scheduler
  # celery-beat:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.api
  #   command: celery -A app.celery beat --loglevel=info
  #   environment:
  #     - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/microlearning
  #     - REDIS_URL=redis://redis:6379
  #     - DEBUG=true
  #     - ENVIRONMENT=development
  #   env_file:
  #     - .env
  #   depends_on:
  #     - db
  #     - redis
  #   volumes:
  #     - ./app:/app/app:ro
  #   restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: microlearning
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d microlearning"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  # redis:
  #   image: redis:7-alpine
  #   command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
  #   volumes:
  #     - redis_data:/data
  #   ports:
  #     - "6379:6379"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3

  # Creator Dashboard (React Web App)
  # creator-dashboard:
  #   build:
  #     context: ./creator-dashboard
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:8000
  #     - REACT_APP_WS_URL=ws://localhost:8000
  #   volumes:
  #     - ./creator-dashboard/src:/app/src:ro
  #     - ./creator-dashboard/public:/app/public:ro
  #   depends_on:
  #     - api
  #   restart: unless-stopped

  # PgAdmin (Database Administration)
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@microlearning.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - db
  #   restart: unless-stopped
  #   profiles:
  #     - admin

  # Redis Commander (Redis Administration)
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   environment:
  #     REDIS_HOSTS: local:redis:6379
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     - redis
  #   restart: unless-stopped
  #   profiles:
  #     - admin

  # Nginx (Load Balancer and Static File Server)
  # nginx:
  #   image: nginx:alpine
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./static:/usr/share/nginx/html/static:ro
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - api
  #     - creator-dashboard
  #   restart: unless-stopped
  #   profiles:
  #     - production

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  default:
    name: microlearning-network